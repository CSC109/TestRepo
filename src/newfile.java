import github.tools.client.GitHubApiClient;import github.tools.client.QueryParams;import github.tools.client.RequestFailedException;import github.tools.client.RequestParams;import github.tools.responseObjects.*;import sun.font.CreatedFontTracker;import javax.management.Query;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Scanner;public class Test {    public static void main(String[] args) {        GitHubApiClient gitHubApiClient = new GitHubApiClient("a-r-t", "31a8e71f0d030a57d42741b08b3d62495e9fe050");        /*        try {            RequestParams requestParams = new RequestParams();            requestParams.addParam("name", "testrepoapi");            CreateRepoResponse createRepoResponse = gitHubApiClient.createRepo(requestParams);            createRepoResponse.printJson();        } catch (RequestFailedException e) {            e.printStackTrace();        }        */        /*        GetRepoInfoResponse getRepoInfoResponse = gitHubApiClient.getRepoInfo("hutch445", "CSC109-Module9");        getRepoInfoResponse.printJson();        System.out.println(getRepoInfoResponse.getDescription());        */        /*        RequestParams requestParams = new RequestParams();        requestParams.addParam("name", "HelloWorld");        UpdateRepoResponse updateRepoResponse = gitHubApiClient.updateRepo("CSC109", "HelloWorld", requestParams);        updateRepoResponse.printJson();        */        /*        DeleteRepoResponse deleteRepoResponse = gitHubApiClient.deleteRepo("a-r-t", "testrepoapi");        deleteRepoResponse.printJson();        */        /*        ListRepoContributorsResponse listRepoContributorsResponse = gitHubApiClient.listRepoContributors("BrianCarducci", "DiscordBot", null);        listRepoContributorsResponse.printJson();        System.out.println(listRepoContributorsResponse.getContributors().get(0).getUsername());        */        /*        QueryParams queryParams = new QueryParams();        queryParams.addParam("type", "private");        ListReposResponse listReposResponse = gitHubApiClient.listRepos(queryParams);        listReposResponse.printJson();        */        /*        ListBranchesInRepoResponse listBranchesInRepoResponse = gitHubApiClient.listBranchesInRepo("CSC109", "DmvSimulator", null);        listBranchesInRepoResponse.printJson();        System.out.println(listBranchesInRepoResponse.getBranches().get(0).getName());         */        /*        GetBranchInfoResponse getBranchInfoResponse = gitHubApiClient.getBranchInfoFromRepo("CSC109", "DmvSimulator", "master");        getBranchInfoResponse.printJson();        System.out.println(getBranchInfoResponse.getLatestCommitAuthorEmail());         */        /*        ListRepoCollaboratorsResponse listRepoCollaboratorsResponse = gitHubApiClient.listRepoCollaborators("BrianCarducci", "DiscordBot");        listRepoCollaboratorsResponse.printJson();         */        /* update branch goes here */        /*        boolean isACollaborator = gitHubApiClient.isUserACollaboratorInRepo("BrianCarducci", "DiscordBot", "a-r-t");        System.out.println("Is a collaborator: " + isACollaborator);         */        /*        AddUserToRepoResponse addUserToRepoResponse = gitHubApiClient.addUserToRepo("CSC109", "TestRepo", "BrianCarducci");        addUserToRepoResponse.printJson();         */        /*        RemoveUserFromRepoResponse removeUserFromRepoResponse = gitHubApiClient.removeUserFromRepo("CSC109", "TestRepo", "BrianCarducci");        removeUserFromRepoResponse.printJson();         */        /*        ListCommitsInRepoResponse listCommitsInRepoResponse = gitHubApiClient.listCommitsInRepo("a-r-t", "SER-225-Game", null);        listCommitsInRepoResponse.printJson();        */        /*        GetCommitResponse getCommitResponse = gitHubApiClient.getCommit("CSC109", "DmvSimulator", "3ba49d56155ec17d695d8b26dff96e1ae67851f4", null);        getCommitResponse.printJson();         */        /*        ListRepoLanguagesResponse listRepoLanguagesResponse = gitHubApiClient.listRepoLanguages("a-r-t", "SER-225-Game");        listRepoLanguagesResponse.printJson();        System.out.println(listRepoLanguagesResponse.getLanguages().get(0).getLanguageName());         */        /*        GetUserResponse getUserResponse = gitHubApiClient.getUser("BrianCarducci");        getUserResponse.printJson();         */        /* UpdateUser here */         // list pull requests        /*        QueryParams queryParams = new QueryParams();        queryParams.addParam("state", "all");        ListPullRequestsResponse listPullRequestsResponse = gitHubApiClient.listPullRequests("a-r-t", "SER-225-Game", queryParams);        listPullRequestsResponse.printJson();        System.out.println(listPullRequestsResponse.getPullRequests().get(0).getBody());        */        /* get pull request        GetPullRequestResponse getPullRequestResponse = gitHubApiClient.getPullRequest("a-r-t", "SER-225-Game", 1);        getPullRequestResponse.printJson();        System.out.println(getPullRequestResponse.getNumberOfCommits());         */        /* get all file content */        /*        ArrayList<RepoFileContent> repoFileContent = gitHubApiClient.getAllFilesInRepo("CSC109", "GitHubApiClient", "master");        for (int i = 0; i < repoFileContent.size(); i++) {            System.out.println(repoFileContent.get(i).getFileName());        }        */        /* create file */        /*        CreateFileResponse createFile = gitHubApiClient.createFile("CSC109", "TestRepo", "src/newfile.java", "master", "new file test", "created new file");        createFile.printJson();        */        /* get file */        GetRepoFileResponse fileResponse = gitHubApiClient.getRepoFile("CSC109", "TestRepo", "src/newfile.java", "master");        System.out.println(fileResponse.getText());        /* update file */        String fileContent = "";        try {            Scanner fileInput = new Scanner(new File("./src/Test.java"));            StringBuilder sb = new StringBuilder();            while (fileInput.hasNextLine()) {                sb.append(fileInput.nextLine());            }            fileContent = sb.toString();        } catch (IOException e) {            e.printStackTrace();        }        System.out.println(fileContent);        UpdateFileResponse updateFile = gitHubApiClient.updateFile("CSC109", "TestRepo", "src/newfile.java", "master", fileContent, "updated test file");        updateFile.printJson();    }}